import requests
import os
from urllib.parse import urlparse
import hashlib

def get_filename_from_url(url):
    parsed = urlparse(url)
    name = os.path.basename(parsed.path)
    if name:
        return name
    else:
        return hashlib.sha256(url.encode('utf-8')).hexdigest()[:10] + ".jpg"

def is_image_content(response):
    content_type = response.headers.get('Content-Type', '')
    image/
    return content_type.startswith("image/")

def download_image(url, folder, seen_hashes):
    try:
        response = requests.get(url, timeout=10, stream=True)
        response.raise_for_status()

        if not is_image_content(response):
            print(f"✗ Skipped (not image content): {url}")
            return

        
        content = response.content
        content_hash = hashlib.sha256(content).hexdigest()
        if content_hash in seen_hashes:
            print(f"✓ Duplicate image found, skipping: {url}")
            return
        seen_hashes.add(content_hash)

        filename = get_filename_from_url(url)
        filepath = os.path.join(folder, filename)

        if os.path.exists(filepath):
            print(f"✓ File already exists, skipping: {filename}")
            return

        with open(filepath, 'wb') as f:
            f.write(content)

        print(f"✓ Successfully fetched: {filename}")
        print(f"✓ Image saved to {filepath}")

    except requests.exceptions.RequestException as e:
        print(f"✗ Connection error for {url}: {e}")
    except Exception as e:
        print(f"✗ An error occurred for {url}: {e}")

def main():
    print("Welcome to the Ubuntu Image Fetcher")
    print("A tool for mindfully collecting images from the web\n")

    urls_input = input("Please enter image URLs separated by commas:\n")
    urls = [url.strip() for url in urls_input.split(",") if url.strip()]

    folder = "Fetched_Images"
    os.makedirs(folder, exist_ok=True)

    seen_hashes = set()

    for url in urls:
        download_image(url, folder, seen_hashes)

    print("\nConnection strengthened. Community enriched.")

if __name__ == "__main__":
    main()
